num_reps
}
)
)
,j_col =
data_j_levels %>%
rep(
times = data_dim_num[1]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_j(dim_num = data_dim_num[1:2])
)
,k_col =
data_k_levels %>%
rep(
times = data_dim_num[1] * data_dim_num[2]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_k(dim_num = data_dim_num)
)
)
colnames(data_flat) <- data_dim_names
return(data_flat)
}
}
flatten(sex_ct)
flatten <- function(data){
# This function is desinged to only work with contingency tables in the form of an array.
# If the inputed data is not an array, the function is exited, and an error message is displayed.
if(!is.array(data)){
stop("Data is not an array!")
} else{
# Gets the values i,j,k for an i*j*k contingency table
data_dim_num <- dim(data)
# Gets the names of the dimensions, and their levels
data_names_levels <- dimnames(data)
# Takes just the names of the dimensions
data_dim_names <- names(data_names_levels)
# Gets the levels for each of dimensions i, j, and k.
data_i_levels <- data_names_levels[[1]]
data_j_levels <- data_names_levels[[2]]
data_k_levels <- data_names_levels[[3]]
# Generates a tibble with one column for each of the i, j, and k
data_flat <-
tibble(
i_col =
data_i_levels %>%
as.factor %>%
rep(
times =
(function(data = data, dim_num = data_dim_num[1]){
num_reps <- c()
h <- 0
for(i in 1:dim_num[1]){
for(j in 1:dim_num[2]){
h <- h + 1
num_reps[h] <- sum(data[i, j,])
}
}
num_reps
}
)
)
,j_col =
data_j_levels %>%
rep(
times = data_dim_num[1]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_j(dim_num = data_dim_num[1:2])
)
,k_col =
data_k_levels %>%
rep(
times = data_dim_num[1] * data_dim_num[2]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_k(dim_num = data_dim_num)
)
)
colnames(data_flat) <- data_dim_names
return(data_flat)
}
}
flatten(sex_ct)
flatten <- function(data){
# This function is desinged to only work with contingency tables in the form of an array.
# If the inputed data is not an array, the function is exited, and an error message is displayed.
if(!is.array(data)){
stop("Data is not an array!")
} else{
# Gets the values i,j,k for an i*j*k contingency table
data_dim_num <- dim(data)
# Gets the names of the dimensions, and their levels
data_names_levels <- dimnames(data)
# Takes just the names of the dimensions
data_dim_names <- names(data_names_levels)
# Gets the levels for each of dimensions i, j, and k.
data_i_levels <- data_names_levels[[1]]
data_j_levels <- data_names_levels[[2]]
data_k_levels <- data_names_levels[[3]]
# Generates a tibble with one column for each of the i, j, and k
data_flat <-
tibble(
i_col =
data_i_levels %>%
as.factor %>%
rep(
times =
(function(data = data, dim_num = data_dim_num[1]){
num_reps <- c()
h <- 0
for(i in 1:dim_num[1]){
for(j in 1:dim_num[2]){
h <- h + 1
num_reps[h] <- sum(data[i, j,])
}
}
return(num_reps)
}
)
)
,j_col =
data_j_levels %>%
rep(
times = data_dim_num[1]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_j(dim_num = data_dim_num[1:2])
)
,k_col =
data_k_levels %>%
rep(
times = data_dim_num[1] * data_dim_num[2]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_k(dim_num = data_dim_num)
)
)
colnames(data_flat) <- data_dim_names
return(data_flat)
}
}
flatten(sex_ct)
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(x)()
flatten <- function(data){
# This function is desinged to only work with contingency tables in the form of an array.
# If the inputed data is not an array, the function is exited, and an error message is displayed.
if(!is.array(data)){
stop("Data is not an array!")
} else{
# Gets the values i,j,k for an i*j*k contingency table
data_dim_num <- dim(data)
# Gets the names of the dimensions, and their levels
data_names_levels <- dimnames(data)
# Takes just the names of the dimensions
data_dim_names <- names(data_names_levels)
# Gets the levels for each of dimensions i, j, and k.
data_i_levels <- data_names_levels[[1]]
data_j_levels <- data_names_levels[[2]]
data_k_levels <- data_names_levels[[3]]
# Generates a tibble with one column for each of the i, j, and k
data_flat <-
tibble(
i_col =
data_i_levels %>%
as.factor %>%
rep(
times =
data %>%
data_num_reps_i(dim_num = data_dim_num[1])
)
,j_col =
data_j_levels %>%
rep(
times = data_dim_num[1]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_j(dim_num = data_dim_num[1:2])
)
,k_col =
data_k_levels %>%
rep(
times = data_dim_num[1] * data_dim_num[2]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_k(dim_num = data_dim_num)
)
)
colnames(data_flat) <- data_dim_names
return(data_flat)
}
}
flatten(sex_ct)
num_reps <- c()
get_num_reps_i <- function(data, dim_num){
num_reps <- c()
for(i in 1:dim_num){
num_reps[i] <- sum(data[i,,])
}
num_reps
}
get_num_reps_j <- function(data, dim_num){
num_reps <- c()
h <- 0
for(i in 1:dim_num[1]){
for(j in 1:dim_num[2]){
h <- h + 1
num_reps[h] <- sum(data[i, j,])
}
}
num_reps
}
get_num_reps_k <- function(data, dim_num){
num_reps <- c()
h <- 0
for(i in 1:dim_num[1]){
for(j in 1:dim_num[2]){
for(k in 1:dim_num[3]){
h <- h + 1
num_reps[h] <- sum(data[i, j, k])
}
}
}
num_reps
}
flatten <- function(data){
# This function is desinged to only work with contingency tables in the form of an array.
# If the inputed data is not an array, the function is exited, and an error message is displayed.
if(!is.array(data)){
stop("Data is not an array!")
} else{
# Gets the values i,j,k for an i*j*k contingency table
data_dim_num <- dim(data)
# Gets the names of the dimensions, and their levels
data_names_levels <- dimnames(data)
# Takes just the names of the dimensions
data_dim_names <- names(data_names_levels)
# Gets the levels for each of dimensions i, j, and k.
data_i_levels <- data_names_levels[[1]]
data_j_levels <- data_names_levels[[2]]
data_k_levels <- data_names_levels[[3]]
# Generates a tibble with one column for each of the i, j, and k
data_flat <-
tibble(
i_col =
data_i_levels %>%
as.factor %>%
rep(
times =
data %>%
data_num_reps_i(dim_num = data_dim_num[1])
)
,j_col =
data_j_levels %>%
rep(
times = data_dim_num[1]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_j(dim_num = data_dim_num[1:2])
)
,k_col =
data_k_levels %>%
rep(
times = data_dim_num[1] * data_dim_num[2]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_k(dim_num = data_dim_num)
)
)
colnames(data_flat) <- data_dim_names
return(data_flat)
}
}
flatten(sex_ct)
flatten <- function(data){
# This function is desinged to only work with contingency tables in the form of an array.
# If the inputed data is not an array, the function is exited, and an error message is displayed.
if(!is.array(data)){
stop("Data is not an array!")
} else{
# Gets the values i,j,k for an i*j*k contingency table
data_dim_num <- dim(data)
# Gets the names of the dimensions, and their levels
data_names_levels <- dimnames(data)
# Takes just the names of the dimensions
data_dim_names <- names(data_names_levels)
# Gets the levels for each of dimensions i, j, and k.
data_i_levels <- data_names_levels[[1]]
data_j_levels <- data_names_levels[[2]]
data_k_levels <- data_names_levels[[3]]
# Generates a tibble with one column for each of the i, j, and k
data_flat <-
tibble(
i_col =
data_i_levels %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_i(dim_num = data_dim_num[1])
)
,j_col =
data_j_levels %>%
rep(
times = data_dim_num[1]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_j(dim_num = data_dim_num[1:2])
)
,k_col =
data_k_levels %>%
rep(
times = data_dim_num[1] * data_dim_num[2]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_k(dim_num = data_dim_num)
)
)
colnames(data_flat) <- data_dim_names
return(data_flat)
}
}
flatten(sex_ct)
library(flatr)
library(flatr)
library(flatr)
flatten <- function(data){
# This function is desinged to only work with contingency tables in the form of an array.
# If the inputed data is not an array, the function is exited, and an error message is displayed.
if(!is.array(data)){
stop("Data is not an array!")
} else{
get_num_reps_i <- function(data, dim_num){
num_reps <- c()
for(i in 1:dim_num){
num_reps[i] <- sum(data[i,,])
}
num_reps
}
get_num_reps_j <- function(data, dim_num){
num_reps <- c()
h <- 0
for(i in 1:dim_num[1]){
for(j in 1:dim_num[2]){
h <- h + 1
num_reps[h] <- sum(data[i, j,])
}
}
num_reps
}
get_num_reps_k <- function(data, dim_num){
num_reps <- c()
h <- 0
for(i in 1:dim_num[1]){
for(j in 1:dim_num[2]){
for(k in 1:dim_num[3]){
h <- h + 1
num_reps[h] <- sum(data[i, j, k])
}
}
}
num_reps
}
# Gets the values i,j,k for an i*j*k contingency table
data_dim_num <- dim(data)
# Gets the names of the dimensions, and their levels
data_names_levels <- dimnames(data)
# Takes just the names of the dimensions
data_dim_names <- names(data_names_levels)
# Gets the levels for each of dimensions i, j, and k.
data_i_levels <- data_names_levels[[1]]
data_j_levels <- data_names_levels[[2]]
data_k_levels <- data_names_levels[[3]]
# Generates a tibble with one column for each of the i, j, and k
data_flat <-
tibble(
i_col =
data_i_levels %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_i(dim_num = data_dim_num[1])
)
,j_col =
data_j_levels %>%
rep(
times = data_dim_num[1]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_j(dim_num = data_dim_num[1:2])
)
,k_col =
data_k_levels %>%
rep(
times = data_dim_num[1] * data_dim_num[2]
) %>%
as.factor %>%
rep(
times =
data %>%
get_num_reps_k(dim_num = data_dim_num)
)
)
colnames(data_flat) <- data_dim_names
return(data_flat)
}
}
get_num_reps_i <- function(data, dim_num){
num_reps <- c()
for(i in 1:dim_num){
num_reps[i] <- sum(data[i,,])
}
num_reps
}
get_num_reps_j <- function(data, dim_num){
num_reps <- c()
h <- 0
for(i in 1:dim_num[1]){
for(j in 1:dim_num[2]){
h <- h + 1
num_reps[h] <- sum(data[i, j,])
}
}
num_reps
}
get_num_reps_k <- function(data, dim_num){
num_reps <- c()
h <- 0
for(i in 1:dim_num[1]){
for(j in 1:dim_num[2]){
for(k in 1:dim_num[3]){
h <- h + 1
num_reps[h] <- sum(data[i, j, k])
}
}
}
num_reps
}
sex_ct <-
array(
data =
c(
43, 26, 134, 149
,29, 22, 23, 36
)
,dim = c(2, 2, 2)
,dimnames = list(
Gender = c("M", "F")
,Intercourse = c("Y", "N")
,Race = c("W", "B")
)
)
flatten(sex_ct)
sex_ct
flatten(sex_ct)
library(devtools)
document()
library(flatr)
