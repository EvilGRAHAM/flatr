,p.value = p.value
)
} else{
stop("Please enter a valid test.")
}
class(results) <- "ct_goodness_of_fit"
print(results)
}
}
goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
test <- goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
test
goodness_of_fit <- function(model, ..., response, type = "Chisq"){
# This function is designed to only work with contingency tables in the form of an array.
#
if(!is.null(model$data)){
data <- model$data
}
# If the inputed data is not an array, the function is exited, and an error message is displayed.
if(!is.data.frame(data)){
stop("Please enter a data frame")
} else{
# Number of combinations of the response variable - number of parameters in the model
df <-
(data %>%
select(-matches(response)) %>%
unique() %>%
tally() %>%
as.numeric()) - length(coef(model))
# Creates a data frame where the response column is converted into integers 0, 1, ...
data_response <-
data %>%
transmute_at(
vars(matches(response))
,unclass
) %>%
select(Response_Num = matches(response)) %>%
transmute(Response_Num = Response_Num - 1)
data_summary <-
data %>%
ungroup() %>%
# Combines the data with integer version of the Response
cbind(data_response) %>%
as_tibble() %>%
group_by_at(
vars(
colnames(data)[colnames(data) != response]
)
) %>%
# Summarizes by the 2 explanatory variables, and then finds the number of entries for each level of the Response
summarize(
Response_0 = sum(Response_Num)
,Response_1 = length(Response_Num) - Response_0
,Total = Response_1 + Response_0
) %>%
ungroup()
response_n_cols <- c("n", response)
data_out <-
data_summary %>%
cbind(
phat =
predict(
object = model
,newdata = data_summary
,type = "response"
)
) %>%
as_tibble() %>%
mutate(
Expected_0 = phat * Total
,Expected_1 = (1 - phat) * Total
)
if(type == "Chisq"){
Chisq_Stat <-
data_out %>%
mutate(
ChiSq_0 = (Response_0 - Expected_0)^2 / Expected_0
,ChiSq_1 = (Response_1 - Expected_1)^2 / Expected_1
) %>%
select(
ChiSq_0
,ChiSq_1
) %>%
sum()
p.value <- pchisq(q = Chisq_Stat, df = df, lower.tail = FALSE)
results <-
list(
test = "Chi-squared"
,model = deparse(substitute(model))
,statistic = Chisq_Stat
,df = df
,p.value = p.value
)
} else if(type == "Gsq"){
Gsq_Stat <-
data_out %>%
mutate(
GSq_0 = 2 * Response_0 * log(Response_0 / Expected_0)
,GSq_1 = 2 * Response_1 * log(Response_1 / Expected_1)
) %>%
select(
GSq_0
,GSq_1
) %>%
sum()
p.value <- pchisq(q = Gsq_Stat, df = df, lower.tail = FALSE)
results <-
list(
test = "G-squared"
,model = deparse(substitute(model))
,statistic = Gsq_Stat
,df = df
,p.value = p.value
)
} else{
stop("Please enter a valid test.")
}
class(results) <- "ct_goodness_of_fit"
return(print(results))
}
}
print.ct_goodness_of_fit <- function(x, ...){
cat(x$test, "Goodness of Fit Test", "\n\n")
cat("model:", x$model, "\n")
cat(x$test, "=", round(x$statistic, 5))
cat(",", "df =", x$df)
cat(",", "p-value =", round(x$p.value, 5))
}
test <- goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
test
goodness_of_fit <- function(model, ..., response, type = "Chisq"){
# This function is designed to only work with contingency tables in the form of an array.
#
if(!is.null(model$data)){
data <- model$data
}
# If the inputed data is not an array, the function is exited, and an error message is displayed.
if(!is.data.frame(data)){
stop("Please enter a data frame")
} else{
# Number of combinations of the response variable - number of parameters in the model
df <-
(data %>%
select(-matches(response)) %>%
unique() %>%
tally() %>%
as.numeric()) - length(coef(model))
# Creates a data frame where the response column is converted into integers 0, 1, ...
data_response <-
data %>%
transmute_at(
vars(matches(response))
,unclass
) %>%
select(Response_Num = matches(response)) %>%
transmute(Response_Num = Response_Num - 1)
data_summary <-
data %>%
ungroup() %>%
# Combines the data with integer version of the Response
cbind(data_response) %>%
as_tibble() %>%
group_by_at(
vars(
colnames(data)[colnames(data) != response]
)
) %>%
# Summarizes by the 2 explanatory variables, and then finds the number of entries for each level of the Response
summarize(
Response_0 = sum(Response_Num)
,Response_1 = length(Response_Num) - Response_0
,Total = Response_1 + Response_0
) %>%
ungroup()
response_n_cols <- c("n", response)
data_out <-
data_summary %>%
cbind(
phat =
predict(
object = model
,newdata = data_summary
,type = "response"
)
) %>%
as_tibble() %>%
mutate(
Expected_0 = phat * Total
,Expected_1 = (1 - phat) * Total
)
if(type == "Chisq"){
Chisq_Stat <-
data_out %>%
mutate(
ChiSq_0 = (Response_0 - Expected_0)^2 / Expected_0
,ChiSq_1 = (Response_1 - Expected_1)^2 / Expected_1
) %>%
select(
ChiSq_0
,ChiSq_1
) %>%
sum()
p.value <- pchisq(q = Chisq_Stat, df = df, lower.tail = FALSE)
results <-
list(
test = "Chi-squared"
,model = deparse(substitute(model))
,statistic = Chisq_Stat
,df = df
,p.value = p.value
)
} else if(type == "Gsq"){
Gsq_Stat <-
data_out %>%
mutate(
GSq_0 = 2 * Response_0 * log(Response_0 / Expected_0)
,GSq_1 = 2 * Response_1 * log(Response_1 / Expected_1)
) %>%
select(
GSq_0
,GSq_1
) %>%
sum()
p.value <- pchisq(q = Gsq_Stat, df = df, lower.tail = FALSE)
results <-
list(
test = "G-squared"
,model = deparse(substitute(model))
,statistic = Gsq_Stat
,df = df
,p.value = p.value
)
} else{
stop("Please enter a valid test.")
}
class(results) <- "ct_goodness_of_fit"
return(results)
}
}
print.ct_goodness_of_fit <- function(x, ...){
cat(x$test, "Goodness of Fit Test", "\n\n")
cat("model:", x$model, "\n")
cat(x$test, "=", round(x$statistic, 5))
cat(",", "df =", x$df)
cat(",", "p-value =", round(x$p.value, 5))
}
goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
test <- goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
test
test$p.value
document()
library(devtools)
document()
document()
library(flatr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(magrittr, warn.conflicts = FALSE, quietly = TRUE)
library(flatr, warn.conflicts = FALSE, quietly = TRUE)
theme_minimal2 <- theme_minimal() %>%  theme_set()
theme_minimal2 <-
theme_update(
panel.border = element_rect(
linetype = "solid"
,colour = "grey92"
,fill = NA
)
,strip.background = element_rect(
linetype = "solid"
,colour = "grey92"
,fill = NA
)
)
lung_cancer_ct <-
array(
data =
c(
126, 35, 100, 61
,908, 497, 688, 807
,913, 336, 747, 598
,235, 58, 172, 121
,402, 121, 308, 215
,182, 72, 156, 98
,60, 11, 99, 43
,104, 21, 89, 36
)
,dim = c(2, 2, 8)
,dimnames = list(
Smoking = c("Y", "N")
,Lung = c("Y", "N")
,City =
c(
"Beij"
,"Shan"
,"Shen"
,"Nanj"
,"Harb"
,"Zhen"
,"Taiy"
,"Nanc"
)
)
)
lung_cancer_ct
lung_cancer_data <- flatr::flatten_ct(lung_cancer_ct)
lung_cancer_summary <-
lung_cancer_data %>%
group_by(City, Smoking) %>%
mutate(Lung_Num = if_else(Lung == "Y", 1, 0 )) %>%
summarize(
Yes = sum(Lung_Num)
,No = length(Lung_Num) - Yes
,Total = Yes + No
)
lung_cancer_summary
logit_lung_cancer <-
lung_cancer_data %>%
glm(
Lung ~ City + Smoking
,family = binomial
,data = .
)
flatr::goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
library(flatr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(magrittr, warn.conflicts = FALSE, quietly = TRUE)
library(flatr, warn.conflicts = FALSE, quietly = TRUE)
theme_minimal2 <- theme_minimal() %>%  theme_set()
theme_minimal2 <-
theme_update(
panel.border = element_rect(
linetype = "solid"
,colour = "grey92"
,fill = NA
)
,strip.background = element_rect(
linetype = "solid"
,colour = "grey92"
,fill = NA
)
)
lung_cancer_ct <-
array(
data =
c(
126, 35, 100, 61
,908, 497, 688, 807
,913, 336, 747, 598
,235, 58, 172, 121
,402, 121, 308, 215
,182, 72, 156, 98
,60, 11, 99, 43
,104, 21, 89, 36
)
,dim = c(2, 2, 8)
,dimnames = list(
Smoking = c("Y", "N")
,Lung = c("Y", "N")
,City =
c(
"Beij"
,"Shan"
,"Shen"
,"Nanj"
,"Harb"
,"Zhen"
,"Taiy"
,"Nanc"
)
)
)
lung_cancer_data <- flatr::flatten_ct(lung_cancer_ct)
logit_lung_cancer <-
lung_cancer_data %>%
glm(
Lung ~ City + Smoking
,family = binomial
,data = .
)
lung_cancer_summary %<>%
cbind(
phat =
predict(
object = logit_lung_cancer
,newdata = lung_cancer_summary %>% dplyr::select(City, Smoking)
,type = "response"
) %>% t
) %>%
mutate(
Expected_Yes = Total*phat
,Expected_No = Total*(1-phat)
)
library(flatr)flatr::goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
flatr::goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
devtools::load_all(".")
library(flatr)
flatr::goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(magrittr, warn.conflicts = FALSE, quietly = TRUE)
library(flatr, warn.conflicts = FALSE, quietly = TRUE)
theme_minimal2 <- theme_minimal() %>%  theme_set()
theme_minimal2 <-
theme_update(
panel.border = element_rect(
linetype = "solid"
,colour = "grey92"
,fill = NA
)
,strip.background = element_rect(
linetype = "solid"
,colour = "grey92"
,fill = NA
)
)
logit_lung_cancer <-
lung_cancer_data %>%
glm(
Lung ~ 1
,family = binomial
,data = .
)
flatr::goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")
flatr::goodness_of_fit(model = logit_lung_cancer, response = "Lung", type = "Chisq")$p.value
death_ct <-
array(
data =
c(
53, 11, 414, 37
,0, 4, 16, 139
)
,dim = c(2, 2, 2)
,dimnames = list(
Defendant = c("W", "B")
,Death = c("Y", "N")
,Victim = c("W", "B")
)
)
death_ct
death_data <- flatr::flatten_ct(death_ct)
death_summary <-
death_data %>%
group_by(Victim, Defendant) %>%
mutate(Lung_Num = if_else(Death == "Y", 1, 0 )) %>%
summarize(
Yes = sum(Death)
,No = length(Death) - Yes
,Total = Yes + No
)
death_summary <-
death_data %>%
group_by(Victim, Defendant) %>%
mutate(Death_Num = if_else(Death == "Y", 1, 0 )) %>%
summarize(
Yes = sum(Death_Num)
,No = length(Death_Num) - Yes
,Total = Yes + No
)
death_summary
death_plot_data <-
death_summary %>%
ungroup %>%
mutate(
Victim = if_else(Victim == "W", "White", "Black")
,Defendant = if_else(Defendant == "W", "White", "Black")
,Yes = Yes/Total
,No = 1 - Yes
) %>%
dplyr::select(
-Total
) %>%
gather(
key = `Death Penalty`
,value = `Sample Proportion`
,-Victim
,-Defendant
)
death_plot_data %>%
ggplot(
aes(
x = Defendant
,y = `Sample Proportion`
,fill = `Death Penalty`
)
) +
geom_col(alpha = 0.75) +
facet_wrap(
~ Victim
,nrow = 1
) +
scale_fill_brewer(
type = "qual"
,name = "Death Penalty:"
,palette = "Set2"
) +
labs(
title = "Proportion of Defendants who Received the Death Penalty by Defendant's Race"
,subtitle = "Conditional on Victim's Race"
)
logit_death <-
death_data %>%
glm(
Death ~ Victim + Defendant
,family = binomial
,data = .
)
summary(logit_death)
death_chisq_gof <- flatr::goodness_of_fit(model = logit_death, response = "Death", type = "Chisq")
death_chisq_gof
death_gsq_gof <- flatr::goodness_of_fit(model = logit_death, response = "Death", type = "Gsq")
death_gsq_gof
