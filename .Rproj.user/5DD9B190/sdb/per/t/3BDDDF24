{
    "collab_server" : "",
    "contents" : "#' Flatten i*j*k contingency tables into tidy data.\n#'\n#' Takes a i*j*k array, and turns it into a tibble\n#'\n#' @param data An i*j*k array.\n#'\n#' @return A tibble with 3 columns.\n#'\n#' @author Scott D Graham, \\email{scott.grah95@@gmail.com}\n#'\n#' @examples\n#' lung_cancer_ct <-\n#'   array(\n#'     data =\n#'       c(\n#'         126, 35, 100, 61\n#'         ,908, 497, 688, 807\n#'         ,913, 336, 747, 598\n#'         ,235, 58, 172, 121\n#'         ,402, 121, 308, 215\n#'         ,182, 72, 156, 98\n#'         ,60, 11, 99, 43\n#'        ,104, 21, 89, 36\n#'       )\n#'     ,dim = c(2, 2, 8)\n#'     ,dimnames = list(\n#'       Smoking = c(\"Y\", \"N\")\n#'       ,Lung = c(\"Y\", \"N\")\n#'       ,City =\n#'         c(\n#'           \"Beij\"\n#'           ,\"Shan\"\n#'           ,\"Shen\"\n#'           ,\"Nanj\"\n#'           ,\"Harb\"\n#'           ,\"Zhen\"\n#'           ,\"Taiy\"\n#'           ,\"Nanc\"\n#'         )\n#'     )\n#'   )\n#' flatten(lung_cancer_ct)\n#'\n#' @importFrom magrittr %>%\n#' @importFrom tibble tibble\n#'\n#' @export\n\nflatten <- function(data){\n  # This function is desinged to only work with contingency tables in the form of an array.\n  # If the inputed data is not an array, the function is exited, and an error message is displayed.\n  if(!is.array(data)){\n    stop(\"Data is not an array!\")\n  } else{\n    get_num_reps_i <- function(data, dim_num){\n      num_reps <- c()\n      for(i in 1:dim_num){\n        num_reps[i] <- sum(data[i,,])\n      }\n      num_reps\n    }\n\n    get_num_reps_j <- function(data, dim_num){\n      num_reps <- c()\n      h <- 0\n      for(i in 1:dim_num[1]){\n        for(j in 1:dim_num[2]){\n          h <- h + 1\n          num_reps[h] <- sum(data[i, j,])\n        }\n      }\n      num_reps\n    }\n\n    get_num_reps_k <- function(data, dim_num){\n      num_reps <- c()\n      h <- 0\n      for(i in 1:dim_num[1]){\n        for(j in 1:dim_num[2]){\n          for(k in 1:dim_num[3]){\n            h <- h + 1\n            num_reps[h] <- sum(data[i, j, k])\n          }\n        }\n      }\n      num_reps\n    }\n\n    # Gets the values i,j,k for an i*j*k contingency table\n    data_dim_num <- dim(data)\n\n    # Gets the names of the dimensions, and their levels\n    data_names_levels <- dimnames(data)\n\n    # Takes just the names of the dimensions\n    data_dim_names <- names(data_names_levels)\n\n    # Gets the levels for each of dimensions i, j, and k.\n    data_i_levels <- data_names_levels[[1]]\n    data_j_levels <- data_names_levels[[2]]\n    data_k_levels <- data_names_levels[[3]]\n\n    # Generates a tibble with one column for each of the i, j, and k\n    data_flat <-\n      tibble(\n        i_col =\n          data_i_levels %>%\n          as.factor %>%\n          rep(\n            times =\n              data %>%\n              get_num_reps_i(dim_num = data_dim_num[1])\n          )\n        ,j_col =\n          data_j_levels %>%\n          rep(\n            times = data_dim_num[1]\n          ) %>%\n          as.factor %>%\n          rep(\n            times =\n              data %>%\n              get_num_reps_j(dim_num = data_dim_num[1:2])\n          )\n        ,k_col =\n          data_k_levels %>%\n          rep(\n            times = data_dim_num[1] * data_dim_num[2]\n          ) %>%\n          as.factor %>%\n          rep(\n            times =\n              data %>%\n              get_num_reps_k(dim_num = data_dim_num)\n          )\n      )\n    colnames(data_flat) <- data_dim_names\n    return(data_flat)\n  }\n}\n",
    "created" : 1509728940376.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1598995359",
    "id" : "3BDDDF24",
    "lastKnownWriteTime" : 1509735811,
    "last_content_update" : 1509735811356,
    "path" : "~/Programs/R Programs/flatr/R/flatten.R",
    "project_path" : "R/flatten.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}