{
    "collab_server" : "",
    "contents" : "#' Calculate the Chi^2 and G^2 Statistics\n#'\n#' Calculates the goodness of fit test statistics for contingency tables\n#'\n#' @param model a GLM regression model.\n#'\n#' @param response a string with the same name as the response column in the data\n#'\n#' @param type either \"Chisq\" or \"Gsq\", which determines the type of goodness of fit test that is ran. Defaults to \"Chisq\".\n#'\n#' @return A list with class \"\\code{ct_goodness_of_fit}\" containing the following components:\n#'\n#' @return \\code{test} the type of test used.\n#'\n#' @return \\code{model} the name of the inputted model.\n#'\n#' @return \\code{statistic} The value of the test statistic as determined by the type parameter\n#'\n#' @return \\code{df} The number of degrees of freedom.\n#'   This equals the number of combinations for explanatory variables less the number of parameters in the model\n#'\n#' @return \\code{p.value} The p-value calculated under a Chi-Squared distribution.\n#'\n#' @author Scott D Graham, \\email{scott.grah95@@gmail.com}\n#'\n#' @examples\n#' lung_cancer_ct <-\n#'   array(\n#'     data =\n#'       c(\n#'         126, 35, 100, 61\n#'         ,908, 497, 688, 807\n#'         ,913, 336, 747, 598\n#'         ,235, 58, 172, 121\n#'         ,402, 121, 308, 215\n#'         ,182, 72, 156, 98\n#'         ,60, 11, 99, 43\n#'        ,104, 21, 89, 36\n#'       )\n#'     ,dim = c(2, 2, 8)\n#'     ,dimnames = list(\n#'       Smoking = c(\"Y\", \"N\")\n#'       ,Lung = c(\"Y\", \"N\")\n#'       ,City =\n#'         c(\n#'           \"Beij\"\n#'           ,\"Shan\"\n#'           ,\"Shen\"\n#'           ,\"Nanj\"\n#'           ,\"Harb\"\n#'           ,\"Zhen\"\n#'           ,\"Taiy\"\n#'           ,\"Nanc\"\n#'         )\n#'     )\n#'   )\n#'\n#' lung_logit <-\n#'   lung_cancer_ct %>%\n#'   flatten_ct() %>%\n#'   glm(\n#'     Lung ~ City + Smoking\n#'     ,family = binomial\n#'     ,data = .\n#'   )\n#'\n#' goodness_of_fit(model = lung_logit, response = \"Lung\", type = \"Gsq\")\n#' lung_logit %>%\n#'   goodness_of_fit(response = \"Lung\", type = \"Gsq\")\n#' lung_cancer_ct %>%\n#'   flatten_ct() %>%\n#'   glm(\n#'     Lung ~ City + Smoking\n#'     ,family = binomial\n#'     ,data = .\n#'   ) %>%\n#'   goodness_of_fit(response = \"Lung\", type = \"Gsq\")\n#'\n#' @importFrom magrittr %>%\n#' @importFrom tibble tibble\n#' @import dplyr\n#'\n#' @export\n\ngoodness_of_fit <- function(model, ..., response, type = \"Chisq\"){\n  # This function is designed to only work with contingency tables in the form of an array.\n  #\n  if(!is.null(model$data)){\n    data <- model$data\n  }\n  # If the inputed data is not an array, the function is exited, and an error message is displayed.\n  if(!is.data.frame(data)){\n    stop(\"Please enter a data frame\")\n  } else{\n    # Number of combinations of the response variable - number of parameters in the model\n    df <-\n      (data %>%\n         select(-matches(response)) %>%\n         unique() %>%\n         tally() %>%\n         as.numeric()) - length(coef(model))\n\n    # Creates a data frame where the response column is converted into integers 0, 1, ...\n    data_response <-\n      data %>%\n      transmute_at(\n        vars(matches(response))\n        ,unclass\n      ) %>%\n      select(Response_Num = matches(response)) %>%\n      transmute(Response_Num = Response_Num - 1)\n\n    data_summary <-\n      data %>%\n      ungroup() %>%\n      # Combines the data with integer version of the Response\n      cbind(data_response) %>%\n      as_tibble() %>%\n      group_by_at(\n        vars(\n          colnames(data)[colnames(data) != response]\n        )\n      ) %>%\n      # Summarizes by the 2 explanatory variables, and then finds the number of entries for each level of the Response\n      summarize(\n        Response_0 = sum(Response_Num)\n        ,Response_1 = length(Response_Num) - Response_0\n        ,Total = Response_1 + Response_0\n      ) %>%\n      ungroup()\n\n    response_n_cols <- c(\"n\", response)\n\n    data_out <-\n      data_summary %>%\n      cbind(\n        phat =\n          predict(\n            object = model\n            ,newdata = data_summary\n            ,type = \"response\"\n          )\n      ) %>%\n      as_tibble() %>%\n      mutate(\n        Expected_0 = phat * Total\n        ,Expected_1 = (1 - phat) * Total\n      )\n\n    if(type == \"Chisq\"){\n      Chisq_Stat <-\n        data_out %>%\n        mutate(\n          ChiSq_0 = (Response_0 - Expected_0)^2 / Expected_0\n          ,ChiSq_1 = (Response_1 - Expected_1)^2 / Expected_1\n        ) %>%\n        select(\n          ChiSq_0\n          ,ChiSq_1\n        ) %>%\n        sum()\n\n      p.value <- pchisq(q = Chisq_Stat, df = df, lower.tail = FALSE)\n\n      results <-\n        list(\n          test = \"Chi-squared\"\n          ,model = deparse(substitute(model))\n          ,statistic = Chisq_Stat\n          ,df = df\n          ,p.value = p.value\n        )\n    } else if(type == \"Gsq\"){\n      Gsq_Stat <-\n        data_out %>%\n        mutate(\n          GSq_0 = 2 * Response_0 * log(Response_0 / Expected_0)\n          ,GSq_1 = 2 * Response_1 * log(Response_1 / Expected_1)\n        ) %>%\n        select(\n          GSq_0\n          ,GSq_1\n        ) %>%\n        sum()\n\n      p.value <- pchisq(q = Gsq_Stat, df = df, lower.tail = FALSE)\n\n      results <-\n        list(\n          test = \"G-squared\"\n          ,model = deparse(substitute(model))\n          ,statistic = Gsq_Stat\n          ,df = df\n          ,p.value = p.value\n        )\n    } else{\n      stop(\"Please enter a valid test.\")\n    }\n\n    class(results) <- \"ct_goodness_of_fit\"\n\n    return(results)\n  }\n}\n",
    "created" : 1509741625533.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2905437731",
    "id" : "AD03A7DD",
    "lastKnownWriteTime" : 1510073892,
    "last_content_update" : 1510073892480,
    "path" : "~/GitHub/flatr/R/goodness_of_fit.R",
    "project_path" : "R/goodness_of_fit.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}